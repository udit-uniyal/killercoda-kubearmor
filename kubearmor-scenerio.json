{
  "name": "KubeArmor Scenario",
  "description": "This scenario demonstrates how to use KubeArmor to protect a Kubernetes cluster.",
  "tags": ["kubernetes", "karmor", "security"],
  "backend": {
    "imageid": "ubuntu"
  },
  "steps": [
    {
      "name": "Install KubeArmor",
      "command": "curl -sfL http://get.kubearmor.io/ | sudo sh -s -- -b /usr/local/bin; karmor install"
    },
    {
      "name": "Deploy test nginx app",
      "command": "kubectl create deployment nginx --image=nginx"
    },
    {
      "name": "Get Nginx pod name",
      "command": "POD=$(kubectl get pod -l app=nginx -o name)"
    },
    {
      "name": "Apply policy to block execution of package management tools (apt/apt-get)",
      "command": "cat <<EOF | kubectl apply -f -
apiVersion: security.kubearmor.com/v1
kind: KubeArmorPolicy
metadata:
  name: block-pkg-mgmt-tools-exec
spec:
  selector:
    matchLabels:
      app: nginx
  process:
    matchPaths:
    - path: /usr/bin/apt
    - path: /usr/bin/apt-get
  action:
    Block
EOF"
    },
    {
      "name": "Execute apt command to download masscan tool",
      "command": "kubectl exec -it $POD -- bash -c \"apt update && apt install masscan\""
    },
    {
      "name": "Verify that apt command is denied permission to execute",
      "expect": "sh: 1: apt: Permission denied
command terminated with exit code 126"
    },
    {
      "name": "Apply policy to get policy violations notifications",
      "command": "cat <<EOF | kubectl apply -f -
apiVersion: security.kubearmor.com/v1
kind: KubeArmorPolicy
metadata:
  name: get-policy-violations-notifications
spec:
  selector:
    matchLabels:
      app: nginx
  audit:
    action:
      Alert
EOF"
    },
    {
      "name": "Apply policy to deny access to service account token",
      "command": "cat <<EOF | kubectl apply -f -
apiVersion: security.kubearmor.com/v1
kind: KubeArmorPolicy
metadata:
  name: deny-access-to-service-account-token
spec:
  selector:
    matchLabels:
      app: nginx
  host:
    files:
    - path: /var/run/secrets/kubernetes.io/serviceaccount/token
  action:
    Block
EOF"
    },
    {
      "name": "Apply policy to audit access to folders/paths",
      "command": "cat <<EOF | kubectl apply -f -
apiVersion: security.kubearmor.com/v1
kind: KubeArmorPolicy
metadata:
  name: audit-access-to-folders-paths
spec:
  selector:
    matchLabels:
      app: nginx
  host:
    files:
    - path: /etc/hosts
    - path: /var/log
  action:
    Alert
EOF"
    },
    {
      "name": "Apply Zero Trust Least Permissive Policy",
      "command": "cat <<EOF | kubectl apply -f -
apiVersion: security.kubearmor.com/v1
kind: KubeArmorPolicy
metadata:
  name: zero-trust-least-permissive-policy
spec:
  selector:
    matchLabels:
      app: nginx
  process:
    matchPaths:
    - path: /usr/bin/nginx
  action:
    Allow
EOF"
    }
  ]
}
